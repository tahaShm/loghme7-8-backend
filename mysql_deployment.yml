apiVersion: v1
kind: PersistentVolumeClaim        # Create a PersistentVolumeClaim to request a PersistentVolume storage
metadata:                          # Claim name and labels
  name: mysql-pv-claim
  labels:
    app: loghme-app
spec:                              # Access mode and resource limits
  storageClassName: manual       # Request a certain storage class
  accessModes:
    - ReadWriteOnce                # ReadWriteOnce means the volume can be mounted as read-write by a single Node
  resources:
    requests:
      storage: 300Mi
---
apiVersion: v1                    # API version
kind: Service                     # Type of kubernetes resource
metadata:
  name: loghme-app-mysql         # Name of the resource
  labels:                         # Labels that will be applied to the resource
    app: loghme-app
spec:
  ports:
    - port: 3306
  selector:                       # Selects any Pod with labels `app=loghme-app,tier=mysql`
    app: loghme-app
    tier: mysql
---
apiVersion: apps/v1
kind: Deployment                    # Type of the kubernetes resource
metadata:
  name: loghme-app-mysql           # Name of the deployment
  labels:                           # Labels applied to this deployment
    app: loghme-app
spec:
  replicas: 1
  selector:
    matchLabels:                    # This deployment applies to the Pods matching the specified labels
      app: loghme-app
      tier: mysql
  strategy:
    type: Recreate
  template:                         # Template for the Pods in this deployment
    metadata:
      labels:                       # Labels to be applied to the Pods in this deployment
        app: loghme-app
        tier: mysql
    spec:                           # The spec for the containers that will be run inside the Pods in this deployment
      containers:
        - image: mysql:8           # The container image
          name: mysql
          resources:
            limits:
              memory: "500Mi"
              cpu: "500m"
          env:                        # Environment variables passed to the container
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:                # Read environment variables from kubernetes secrets
                secretKeyRef:
                  name: mysql-root-pass
                  key: password
            - name: MYSQL_DATABASE
              valueFrom:
                secretKeyRef:
                  name: mysql-db-url
                  key: database
            - name: MYSQL_USER
              valueFrom:
                secretKeyRef:
                  name: mysql-user-pass
                  key: username
            - name: MYSQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mysql-user-pass
                  key: password
          ports:
            - containerPort: 3306        # The port that the container exposes
              name: mysql
          volumeMounts:
            - name: mysql-persistent-storage  # This name should match the name specified in `volumes.name`
              mountPath: /var/lib/mysql
            - name: initdb
              mountPath: /docker-entrypoint-initdb.d
      volumes:                       # A PersistentVolume is mounted as a volume to the Pod
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pv-claim
        - name: initdb
          configMap:
            name: mysql-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-config
data:
  MYSQL_DATABASE: loghme6
  MYSQL_DATABASE_URL: mysql-db-url
  initdb.sql: |
    create database loghme6;
    use loghme6;
    create table Users (
        firstName char(100),
        lastName char(100),
        email char(100),
        credit integer,
        password char(100),
        primary key (email)
    );

    create table Restaurants (
        id char(100),
        name char(100),
        logoUrl char(255),
        x float,
        y float,
        primary key (id)
    );

    create table Foods (
        id integer NOT NULL AUTO_INCREMENT,
        name char(100),
        description text,
        popularity float,
        imageUrl char(255),
        price integer,
        count integer,
        primary key (id)
    );

    create table PartyFoods (
        id integer NOT NULL AUTO_INCREMENT,
        foodId integer,
        newPrice integer,
        count integer,
        valid char(1),
        primary key (id),
        foreign key (foodId) references Foods(id) on delete cascade
    );

    create table Menu (
        restaurantId char(100),
        foodId integer,
        primary key (restaurantId, foodId),
        foreign key (restaurantId) references Restaurants(id) on delete cascade,
        foreign key (foodId) references Foods(id) on delete cascade
    );

    create table PartyMenu (
        restaurantId char(100),
        partyFoodId integer,
        primary key (restaurantId, partyFoodId),
        foreign key (restaurantId) references Restaurants(id) on delete cascade,
        foreign key (partyFoodId) references PartyFoods(id) on delete cascade
    );

    create table Orders (
        id integer NOT NULL AUTO_INCREMENT,
        username char(50),
        restaurantId char(100),
        status ENUM ('searching', 'delivering', 'done', 'notFinalized'),
        registerTime DATETIME,
        primary key (id),
        foreign key (username) references Users(email) on delete cascade,
        foreign key (restaurantId) references Restaurants(id) on delete cascade
    );

    create table OrderRows (
        id integer NOT NULL AUTO_INCREMENT,
        orderId integer,
        foodId integer NULL,
        partyFoodId integer NULL,
        count integer,
        foodType ENUM ('normal', 'party'),
        primary key (id),
        foreign key (orderId) references Orders(id) on delete cascade,
        foreign key (foodId) references Foods(id) on delete cascade,
        foreign key (partyFoodId) references PartyFoods(id) on delete cascade
    );